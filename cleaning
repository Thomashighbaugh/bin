#!/bin/bash
# Arch Linux System Maintenance
# based on alsm 

# CONFIGURATION #
# Avoid enviromental variables set in your user to avoid unexpected behavior
# Since the script will run as root every reference to enviromental variables will use root's env variables

# Please fill the variable below with the username that you want the script to act on
# If you are unsure about your username run $ whoami on your shell
user='bash -c "whoami"'

# The path where the final report will be outputted to
# Default: /home/$user/report.txt
rp="/home/$user/report.txt"

# What (path) should be backed up (recursively)
# Default: /home/$user
bp_src="/home/$user/"

# Where (path) $bp_src should be backed up at
# Default: /home/$user/alsm-backup
bp_target="/home/$user/alsm-backup"

# How many package versions to keep in pacman cache
# Default: 3
pc="3"

# Where to redirect original output of commands
# If you wish to run the script in a live shell and see progress use "/dev/stdout"
# Default: /dev/null
out="/dev/null"

if [ -n "$user" ]
then
	printf "### ALSM Report created on $(date) ###\n\n" > $rp
else
	printf "[ERROR] Script variable $user is empty\n"
	printf "Please fill the variable $user with the username that you want the script to act on before running the script\n"
	exit 1
fi

# PROCEDURES #
# Check for errors
failed_count="$(systemctl status | grep "Failed: " | awk '{print $2}')"
if [ $failed_count -gt 0 ]
then
	printf "[ATTENTION] $failed_count failed systemd services found. \n" >> $rp
	printf "'systemctl --failed' output:\n" >> $rp
	systemctl --failed >> $rp
	printf "\n" >> $rp
	printf "[FIX] Please follow the instructions in https://wiki.archlinux.org/index.php/Systemd#Investigating_failed_services to resolve your issue(s).\n\n" >> $rp
else
	printf "[SAFE] No failed systemd services found.\n\n" >> $rp
fi

error_count="$(journalctl -p 3 -xb | wc -l)"
let "error_count = $error_count - 1"
if [ $error_count -gt 0 ]
then
	printf "[ATTENTION] $error_count errors found in /var/log log files. \n" >> $rp
	printf "'journalctl -p 3 -xb' output:\n" >> $rp
	journalctl -p 3 -xb >> $rp
	printf "\n" >> $rp
else
	printf "[SAFE] No errors found in /var/log logfiles.\n\n" >> $rp
fi

# Remove orphans/unused packages
unused_pkgs=$(pacman -Qdtq | wc -l)
if [ $unused_pkgs -gt 0 ]
then
	yes | pacman -Rsn $(pacman -Qdtq) >> $out && printf "[DONE] Succesfully removed unused dependencies \n\n" >> $rp || printf "[ERROR] Couldn't remove unused dependencies \n\n" >> $rp
else
	printf "[DONE] There are no unusued dependencies to be removed \n\n" >> $rp
fi

# Update mirror list
reflector --latest 100 --protocol http --protocol https --sort rate --save /etc/pacman.d/mirrorlist >> $out && printf "[DONE] Succesfully updated and sorted the mirror list \n\n" >> $rp || printf "[ERROR] Couldn't update/sort the mirror list \n\n" >> $rp

# Clean the filesystem
# Clear pacman cache
paccache -rk$pc >> $out && printf "[DONE] Succesfully cleared cache and left just the $pc latest version(s) of each cached package \n\n" >> $rp || printf "[ERROR] Couldn't clear the pacman cache \n\n" >> $rp
# Comment line below if you do not want to remove cache of uninstalled packages
paccache -ruk0 >> $out && printf "[DONE] Succesfully cleared cache of all uninstalled packages \n\n" >> $rp || printf "[ERROR] Couldn't clear the cache of all uninstalled packages \n\n" >> $rp

## Disabled (risky) functionality ##

# System Upgrade
# It is not recommended to uncomment the line below because upgrading your system will possibly require user intervention
# and it is generally a serious task that shouldn't be automated. Only uncomment this line if you have read this https://wiki.archlinux.org/index.php/System_maintenance#Read_before_upgrading_the_system
#yes | pacman -Syu && printf "[DONE] Succesfully upgraded system\n\n">> $rp || printf "[ERROR] Couldn't upgrade system\n\n">> $rp

# Remove duplicates
# These lines are commented to prevent the unwanted deletion of files
# It is not recommended to uncomment the lines below without first doing a dry run of $ rmlint and inspecting what files will be removed
#printf "rmlint $HOME:\n" >> $rp
#rmlint $HOME | tail -n7 | head -n4 >> $rp
#yes | bash rmlint.sh -d >> $out && printf "[DONE] Succesfully removed duplicate files with rmlint \n\n" >> $rp || printf "[ERROR] Couldn't remove duplicate files with rmlint \n\n" >> $rp
#rm rmlint.*

# Backup
# Please read https://wiki.archlinux.org/index.php/Rsync for more details
#rsync -a -r --delete --quiet --exclude={""} $bp_src $bp_target && printf "[DONE] Succesfully backed up $bp_src to $bp_target \n\n" >> $rp || printf "[ERROR] Couldn't backup $bp_src to $bp_target \n\n" >> $rp
#chown $user $rp $bp_target >> $out
