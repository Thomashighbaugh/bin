#!/bin/bash
#vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4:
# Tuned Linux
#
# Thomas Leon Highbaugh
#
# Based on work by: Nicolas Brousse & juancarlospaco
#
# Notes :
#   Use this script at your OWN risk. There is no guarantee whatsoever.
#!/usr/bin/env bash
## ANSI Colors (FG & BG)
RED="$(printf '\033[31m')" GREEN="$(printf '\033[32m')" ORANGE="$(printf '\033[33m')" BLUE="$(printf '\033[34m')"
MAGENTA="$(printf '\033[35m')" CYAN="$(printf '\033[36m')" WHITE="$(printf '\033[37m')" BLACK="$(printf '\033[30m')"
REDBG="$(printf '\033[41m')" GREENBG="$(printf '\033[42m')" ORANGEBG="$(printf '\033[43m')" BLUEBG="$(printf '\033[44m')"
MAGENTABG="$(printf '\033[45m')" CYANBG="$(printf '\033[46m')" WHITEBG="$(printf '\033[47m')" BLACKBG="$(printf '\033[40m')"

## Banner
clear
cat <<-_EOF_
	${CYAN}┌─────────────────────────────────────────────────────────────────────────────┐
	│  ${MAGENTA}                                                                           ${CYAN}│
	│  ${MAGENTA} _______                       __   _____   __                             ${CYAN}│
	│  ${MAGENTA}|_     _|.--.--.-----.-----.--|  | |     |_|__|.-----.--.--.--.--.         ${CYAN}│
	│  ${MAGENTA}  |   |  |  |  |     |  -__|  _  | |       |  ||     |  |  |_   _|         ${CYAN}│
	│  ${MAGENTA}  |___|  |_____|__|__|_____|_____| |_______|__||__|__|_____|__.__|         ${CYAN}│
	└─────────────────────────────────────────────────────────────────────────────┘                                                                  
_EOF_

host=$(cat /etc/hostname)




function sysctl() {
echo "${GREEN}" "Update sysctl for $host"

mem_bytes=$(awk '/MemTotal:/ { printf "%0.f",$2 * 1024}' /proc/meminfo)
shmmax=$(echo "$mem_bytes * 0.90" | bc | cut -f 1 -d '.')
shmall=$( $mem_bytes / "$(getconf PAGE_SIZE)")
max_orphan=$(echo "$mem_bytes * 0.10 / 65536" | bc | cut -f 1 -d '.')
file_max=$(echo "$mem_bytes / 4194304 * 256" | bc | cut -f 1 -d '.')
max_tw=$(($file_max * 2))
min_free=$(echo "($mem_bytes / 1024) * 0.01" | bc | cut -f 1 -d '.')

    vm_dirty_bg_ratio=3
    vm_dirty_ratio=5


cat >/etc/sysctl.conf <<EOF

# Disable syncookies (syncookies are not RFC compliant and can use too much resources)
net.ipv4.tcp_syncookies = 0

# Basic TCP tuning
net.ipv4.tcp_keepalive_time = 600
net.ipv4.tcp_synack_retries = 3
net.ipv4.tcp_syn_retries = 3

# RFC1337
net.ipv4.tcp_rfc1337 = 1

# Defines the local port range that is used by TCP and UDP
# to choose the local port
net.ipv4.ip_local_port_range = 1024 65535

# Log packets with impossible addresses to kernel log
net.ipv4.conf.all.log_martians = 1

# Minimum interval between garbage collection passes This interval is
# in effect under high memory pressure on the pool
net.ipv4.inet_peer_gc_mintime = 5

# Disable Explicit Congestion Notification in TCP
net.ipv4.tcp_ecn = 0

# Enable window scaling as defined in RFC1323
net.ipv4.tcp_window_scaling = 1

# Enable timestamps (RFC1323)
net.ipv4.tcp_timestamps = 1

# Enable select acknowledgments
net.ipv4.tcp_sack = 1

# Enable FACK congestion avoidance and fast restransmission
net.ipv4.tcp_fack = 1

# Allows TCP to send "duplicate" SACKs
net.ipv4.tcp_dsack = 1

# Controls IP packet forwarding
net.ipv4.ip_forward = 0

# No controls source route verification (RFC1812)
net.ipv4.conf.default.rp_filter = 0

# Enable fast recycling TIME-WAIT sockets
net.ipv4.tcp_tw_recycle = 1


# tells the kernel how many TCP sockets that are not attached
# to any user file handle to maintain
net.ipv4.tcp_max_orphans = $max_orphan

# How may times to retry before killing TCP connection, closed by our side
net.ipv4.tcp_orphan_retries = 1

# how long to keep sockets in the state FIN-WAIT-2
# if we were the one closing the socket
net.ipv4.tcp_fin_timeout = 20

# maximum number of sockets in TIME-WAIT to be held simultaneously
net.ipv4.tcp_max_tw_buckets = $max_tw

# don't cache ssthresh from previous connection
net.ipv4.tcp_no_metrics_save = 1
net.ipv4.tcp_moderate_rcvbuf = 1

# increase Linux autotuning TCP buffer limits
net.ipv4.tcp_rmem = 4096 87380 16777216
net.ipv4.tcp_wmem = 4096 65536 16777216

# increase TCP max buffer size
net.core.rmem_max = 16777216
net.core.wmem_max = 16777216

net.core.netdev_max_backlog = 2500
net.core.somaxconn = 65000

vm.swappiness = 0

# You can monitor the kernel behavior with regard to the dirty
# pages by using grep -A 1 dirty /proc/vmstat
vm.dirty_background_ratio = $vm_dirty_bg_ratio
vm.dirty_ratio = $vm_dirty_ratio

# required free memory (set to 1% of physical ram)
vm.min_free_kbytes = $min_free

# system open file limit
fs.file-max = $file_max

# Core dump suidsafe
fs.suid_dumpable = 2 

kernel.printk = 4 4 1 7
kernel.core_uses_pid = 1
kernel.sysrq = 0
kernel.msgmax = 65536
kernel.msgmnb = 65536

# Maximum shared segment size in bytes
kernel.shmmax = $shmmax

# Maximum number of shared memory segments in pages
kernel.shmall = $shmall
EOF

/sbin/sysctl -p /etc/sysctl.conf
echo ${BLUE} "sysctl.conf has been written successfully"

}

function pacman() {
	sudo mkdir -p  /etc/pacman.d/
	
	echo "${GREEN}" "The following prompts will ask you if you would like to eliminate various modules from paman I am unlikely to use and thus can strip from my system. Consider each carefully, as your needs will undoubtably different from mine own."


read -rp ".PYC Python bytecode cache files"  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/bin/__pycache__/* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}";;
esac


read -rp "Non-English Locale translations"  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/share/locale/* usr/share/X11/locale/* usr/share/i18n/* !*locale*/en*/* !usr/share/i18n/charmaps/UTF-8.gz !usr/share/*locale*/locale.* !usr/share/*locales/en_?? !usr/share/*locales/i18n* !usr/share/*locales/iso* !usr/share/*locales/trans* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac

read -rp "Non-English Locales in VIM"  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract =usr/share/vim/vim*/lang/* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac


read -rp "PGP Non-English plain-text help local documentation"  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/share/gnupg/help.*.txt " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac


read -rp "Fish command line shell"  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/share/gnupg/help.*.txt " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac

read -rp "GTK-Doc HTML help local documentation"  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/share/gtk-doc/html/* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac


read -rp "Google Chrome devices like Chromebook ChromeCast Google Nest Google Assistant "  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/lib/modules/[1-9]*-ARCH/kernel/drivers/platform/chrome* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac
~                       

read -rp "Non-English plain-text help local documentation"  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract =usr/share/doc/* usr/share/help/* !usr/share/help/en* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac



read -rp "  Integrated Services Digital Network ISDN Network router and modem drivers of any kind from 1990 or older"  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/lib/modules/[1-9]*-ARCH/kernel/drivers/isdn* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac


read -rp " BATMAN Network router and modem drivers of any kind"  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/lib/modules/[1-9]*-ARCH/kernel/net/batman-adv* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac

read -rp "  InfraRed IR drivers of any kind like infrared remote controls"  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/lib/modules/[1-9]*-ARCH/kernel/drivers/net/irda* usr/lib/modules/[1-9]*-ARCH/kernel/net/irda*" >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac

read -rp "  Sun MicroSystems Remote Procedure Call SunRPC for Sun hardware drivers of any kind "  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract =usr/lib/modules/[1-9]*-ARCH/kernel/net/sunrpc* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac

read -rp " Parallel port printer port drivers of any kind: "  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract =  usr/lib/modules/[1-9]*-ARCH/kernel/drivers/parport* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac

read -rp "NFC Near Field Communication drivers of any kind "  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/lib/modules/[1-9]*-ARCH/kernel/drivers/nfc* usr/lib/modules/[1-9]*-ARCH/kernel/net/nfc* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac

read -rp " Apple Mac Thunderbolt drivers of any kind "  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/lib/modules/[1-9]*-ARCH/kernel/drivers/thunderbolt* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac

read -rp " PCMCIA Notebook pluggable card drivers of any kind from year 1990 or older "  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/lib/modules/[1-9]*-ARCH/kernel/drivers/pcmcia* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac

read -rp " HAM Radio Hobby radio drivers of any kind "  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract =  usr/lib/modules/[1-9]*-ARCH/kernel/drivers/net/hamradio* " >> /etc/pacman.d/tuned.conf ;;
   ?) echo ${RED} "declined" "${WHITE}" ;;
esac
read -rp "  WiMax wireless drivers of any kind "  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/lib/modules/[1-9]*-ARCH/kernel/drivers/net/wimax* usr/lib/modules/[1-9]*-ARCH/kernel/net/wimax*
 " >> /etc/pacman.d/tuned.conf ;;
   ?) echo "${RED}" "declined" "${WHITE}" ;;
esac

read -rp "  FireWire drivers:  "  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/lib/modules/[1-9]*-ARCH/kernel/drivers/firewire* usr/lib/modules/[1-9]*-ARCH/kernel/drivers/infiniband*
 " >> /etc/pacman.d/tuned.conf ;;
   ?) echo "${RED}" "declined" "${WHITE}" ;;
esac 
  InfiniBand router and modem drivers:
read -rp " CDROM optical drive drivers: "  response  
response=${response,,}
case "$response" in 
   [yY])  echo " NoExtract = usr/lib/modules/[1-9]*-ARCH/kernel/drivers/cdrom*
 
 " >> /etc/pacman.d/tuned.conf ;;
   ?) echo "${RED}" "declined" "${WHITE}" ;;
esac
}

sysctl 
echo "${BLUE}" ""
pacman 

exit $?
